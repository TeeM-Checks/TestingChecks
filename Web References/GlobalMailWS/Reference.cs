//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace NewBilletterie.GlobalMailWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EmailServiceSoap", Namespace="http://com.sig-hosting.efiling.www/")]
    public partial class EmailService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendCUBASMTPMail_SingleOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendCUBASMTPMail_MultipleBCCOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendCUBASMTPMail_MultipleBCCSupportOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public EmailService() {
            this.Url = global::NewBilletterie.Properties.Settings.Default.NewBilletterie_GlobalMailWS_EmailService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendCUBASMTPMail_SingleCompletedEventHandler SendCUBASMTPMail_SingleCompleted;
        
        /// <remarks/>
        public event SendCUBASMTPMail_MultipleBCCCompletedEventHandler SendCUBASMTPMail_MultipleBCCCompleted;
        
        /// <remarks/>
        public event SendCUBASMTPMail_MultipleBCCSupportCompletedEventHandler SendCUBASMTPMail_MultipleBCCSupportCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.sig-hosting.efiling.www/SendCUBASMTPMail_Single", RequestNamespace="http://com.sig-hosting.efiling.www/", ResponseNamespace="http://com.sig-hosting.efiling.www/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SMTPMailResponse SendCUBASMTPMail_Single(string sTo, string sFrom, string sSubject, string sBody, string server, string smtUserPass) {
            object[] results = this.Invoke("SendCUBASMTPMail_Single", new object[] {
                        sTo,
                        sFrom,
                        sSubject,
                        sBody,
                        server,
                        smtUserPass});
            return ((SMTPMailResponse)(results[0]));
        }
        
        /// <remarks/>
        public void SendCUBASMTPMail_SingleAsync(string sTo, string sFrom, string sSubject, string sBody, string server, string smtUserPass) {
            this.SendCUBASMTPMail_SingleAsync(sTo, sFrom, sSubject, sBody, server, smtUserPass, null);
        }
        
        /// <remarks/>
        public void SendCUBASMTPMail_SingleAsync(string sTo, string sFrom, string sSubject, string sBody, string server, string smtUserPass, object userState) {
            if ((this.SendCUBASMTPMail_SingleOperationCompleted == null)) {
                this.SendCUBASMTPMail_SingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendCUBASMTPMail_SingleOperationCompleted);
            }
            this.InvokeAsync("SendCUBASMTPMail_Single", new object[] {
                        sTo,
                        sFrom,
                        sSubject,
                        sBody,
                        server,
                        smtUserPass}, this.SendCUBASMTPMail_SingleOperationCompleted, userState);
        }
        
        private void OnSendCUBASMTPMail_SingleOperationCompleted(object arg) {
            if ((this.SendCUBASMTPMail_SingleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendCUBASMTPMail_SingleCompleted(this, new SendCUBASMTPMail_SingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.sig-hosting.efiling.www/SendCUBASMTPMail_MultipleBCC", RequestNamespace="http://com.sig-hosting.efiling.www/", ResponseNamespace="http://com.sig-hosting.efiling.www/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SMTPMailResponse SendCUBASMTPMail_MultipleBCC(string sTo, string agentEmails, string sFrom, string sSubject, string sBody, string server, string smtUserPass, string bcc) {
            object[] results = this.Invoke("SendCUBASMTPMail_MultipleBCC", new object[] {
                        sTo,
                        agentEmails,
                        sFrom,
                        sSubject,
                        sBody,
                        server,
                        smtUserPass,
                        bcc});
            return ((SMTPMailResponse)(results[0]));
        }
        
        /// <remarks/>
        public void SendCUBASMTPMail_MultipleBCCAsync(string sTo, string agentEmails, string sFrom, string sSubject, string sBody, string server, string smtUserPass, string bcc) {
            this.SendCUBASMTPMail_MultipleBCCAsync(sTo, agentEmails, sFrom, sSubject, sBody, server, smtUserPass, bcc, null);
        }
        
        /// <remarks/>
        public void SendCUBASMTPMail_MultipleBCCAsync(string sTo, string agentEmails, string sFrom, string sSubject, string sBody, string server, string smtUserPass, string bcc, object userState) {
            if ((this.SendCUBASMTPMail_MultipleBCCOperationCompleted == null)) {
                this.SendCUBASMTPMail_MultipleBCCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendCUBASMTPMail_MultipleBCCOperationCompleted);
            }
            this.InvokeAsync("SendCUBASMTPMail_MultipleBCC", new object[] {
                        sTo,
                        agentEmails,
                        sFrom,
                        sSubject,
                        sBody,
                        server,
                        smtUserPass,
                        bcc}, this.SendCUBASMTPMail_MultipleBCCOperationCompleted, userState);
        }
        
        private void OnSendCUBASMTPMail_MultipleBCCOperationCompleted(object arg) {
            if ((this.SendCUBASMTPMail_MultipleBCCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendCUBASMTPMail_MultipleBCCCompleted(this, new SendCUBASMTPMail_MultipleBCCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://com.sig-hosting.efiling.www/SendCUBASMTPMail_MultipleBCCSupport", RequestNamespace="http://com.sig-hosting.efiling.www/", ResponseNamespace="http://com.sig-hosting.efiling.www/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SMTPMailResponse SendCUBASMTPMail_MultipleBCCSupport(string sTo, string agentEmails, string sFrom, string sSubject, string sBody, string server, string smtUserPass, string bcc, string supportEMail) {
            object[] results = this.Invoke("SendCUBASMTPMail_MultipleBCCSupport", new object[] {
                        sTo,
                        agentEmails,
                        sFrom,
                        sSubject,
                        sBody,
                        server,
                        smtUserPass,
                        bcc,
                        supportEMail});
            return ((SMTPMailResponse)(results[0]));
        }
        
        /// <remarks/>
        public void SendCUBASMTPMail_MultipleBCCSupportAsync(string sTo, string agentEmails, string sFrom, string sSubject, string sBody, string server, string smtUserPass, string bcc, string supportEMail) {
            this.SendCUBASMTPMail_MultipleBCCSupportAsync(sTo, agentEmails, sFrom, sSubject, sBody, server, smtUserPass, bcc, supportEMail, null);
        }
        
        /// <remarks/>
        public void SendCUBASMTPMail_MultipleBCCSupportAsync(string sTo, string agentEmails, string sFrom, string sSubject, string sBody, string server, string smtUserPass, string bcc, string supportEMail, object userState) {
            if ((this.SendCUBASMTPMail_MultipleBCCSupportOperationCompleted == null)) {
                this.SendCUBASMTPMail_MultipleBCCSupportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendCUBASMTPMail_MultipleBCCSupportOperationCompleted);
            }
            this.InvokeAsync("SendCUBASMTPMail_MultipleBCCSupport", new object[] {
                        sTo,
                        agentEmails,
                        sFrom,
                        sSubject,
                        sBody,
                        server,
                        smtUserPass,
                        bcc,
                        supportEMail}, this.SendCUBASMTPMail_MultipleBCCSupportOperationCompleted, userState);
        }
        
        private void OnSendCUBASMTPMail_MultipleBCCSupportOperationCompleted(object arg) {
            if ((this.SendCUBASMTPMail_MultipleBCCSupportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendCUBASMTPMail_MultipleBCCSupportCompleted(this, new SendCUBASMTPMail_MultipleBCCSupportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://com.sig-hosting.efiling.www/")]
    public partial class SMTPMailResponse {
        
        private bool noErrorField;
        
        private string errorMessageField;
        
        /// <remarks/>
        public bool noError {
            get {
                return this.noErrorField;
            }
            set {
                this.noErrorField = value;
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SendCUBASMTPMail_SingleCompletedEventHandler(object sender, SendCUBASMTPMail_SingleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendCUBASMTPMail_SingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendCUBASMTPMail_SingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SMTPMailResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SMTPMailResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SendCUBASMTPMail_MultipleBCCCompletedEventHandler(object sender, SendCUBASMTPMail_MultipleBCCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendCUBASMTPMail_MultipleBCCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendCUBASMTPMail_MultipleBCCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SMTPMailResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SMTPMailResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SendCUBASMTPMail_MultipleBCCSupportCompletedEventHandler(object sender, SendCUBASMTPMail_MultipleBCCSupportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendCUBASMTPMail_MultipleBCCSupportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendCUBASMTPMail_MultipleBCCSupportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SMTPMailResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SMTPMailResponse)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591